/*DO 
  checkmk tests/test_math.test >tests/test_math.c
*/
#define fuenf 5
#include "../include/hhmpcmath.h"

#test cholesky_test
    real_t sol[9];
    real_t mtx[] = {4., 2., 0., 2., 5., 2., 0., 2., 5.};
    real_t sol_ref[] = {2., 0., 0., 1., 2., 0., 0., 1., 2.};
    uint32_t dim = 3;
    cholesky(sol, mtx, dim);
    fail_unless(mtx_cmp(sol, sol_ref, 3) == 0, "cholesky failed");

#test fwd_subst_test
    real_t sol[2]; 
    real_t test_a[] = {2., 0., 3., 1.}, test_b[] = {4., 4.};
    real_t sol_ref[] = {2., -2.};
    fwd_subst(sol, test_a, 2, test_b);
    fail_unless(mtx_cmp(sol, sol_ref, 2) == 0, "forward substitution failed");

#test bwd_subst_test
    real_t sol[2]; 
    real_t test_a[] = {4., 1., 0., 2.}, test_b[] = {4., 4.};
    real_t sol_ref[] = {.5, 2.};
    bwd_subst(sol, test_a, 2, test_b);
    fail_unless(mtx_cmp(sol, sol_ref, 2) == 0, "backward substitution failed");

#test mtx_out_test
    real_t test_a[] = {2., 2., 3., 3.}, test_b[] = {4., 4.}; 
    fail_unless(mtx_out(test_a, 2, 2, test_b) == 16., "mtx_out function confuses me");

#test simple_sum_test
    fail_unless(simple_sum(3, 2) == fuenf, "sum function borked");
    fail_unless(simple_sum(-3, 2) == -1, "sum function borked");
    fail_unless(simple_sum(3, -2) == 1, "sum function borked");
    fail_unless(simple_sum(-3, -2) == -fuenf, "sum function borked");