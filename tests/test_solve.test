/*DO 
  checkmk tests/test_alg.test >tests/test_alg.c
*/
#include "../include/hhmpcsolve.h"
#include "../include/hhmpcmath.h"
#include "../include/hhmpcusefull.h"
#include <stdlib.h>

#define N 2
#define M 1
#define T 3

    
#test form_Y_test3
    const uint32_t n = 2, m = 1;
    real_t A[] = {1., 2., 1., 2.};
    real_t B[] = {-3., 1.};
    real_t C[] = {3., 1., 0., 0., 0., 0., 0., 0., 0.,
                  -1., 0., 1., 0., 0., 0., 0., 0., 0.,
                  0., -1., -2., 3., 1., 0., 0., 0., 0.,
                  0., -1., -2., -1., 0., 1., 0., 0., 0.,
                  0., 0., 0., 0., -1., -2., 3., 1., 0.,
                  0., 0., 0., 0., -1., -2., -1., 0., 1.};
    real_t Phi[] = {4., 0., 0., 0., 0., 0., 0., 0., 0.,
                    0., 5., 2., 0., 0., 0., 0., 0., 0.,
                    0., 2., 4., -1., 0., 0., 0., 0., 0.,
                    0., 0., -1., 2., 0., 0., 0., 0., 0.,
                    0., 0., 0., 0., 5., 2., 0., 0., 0.,
                    0., 0., 0., 0., 2., 4., -1., 0., 0.,
                    0., 0., 0., 0., 0., -1., 3., 0., 0.,
                    0., 0., 0., 0., 0., 0., 0., 4., -3.,
                    0., 0., 0., 0., 0., 0., 0., -3., 4.};    
    real_t rd[] = {1., 1., 1., 1., 1., 1., 1., 1., 1.};
    real_t rp[] = {1., 1., 1., 1., 1., 1.};
    
    real_t *delta_v = malloc(T*n*sizeof(real_t));
    real_t *delta_z = malloc(T*(n+m)*sizeof(real_t));
    real_t *tmp_optvar_seqlen = (real_t *)malloc(sizeof(real_t) * T*(n+m));
    real_t *tmp_dual_seqlen = (real_t *)malloc(sizeof(real_t) * T*n);
    real_t *L_Y = (real_t *)malloc(sizeof(real_t) * T*n*T*n);
    real_t *L_Y_T = (real_t *)malloc(sizeof(real_t) * T*n*T*n);
    real_t *C_T = (real_t *)malloc(sizeof(real_t) * T*(n+m)*T*n);
    real_t *A_T = (real_t *)malloc(sizeof(real_t) * n*n);
    real_t *B_T = (real_t *)malloc(sizeof(real_t) * m*n);
    real_t eye_nm[] = {1., 0., 0.,
                       0., 1., 0.,
                       0., 0., 1};
    real_t eye_n[] = {1., 0.,
                      0., 1.};           
    struct hhmpc_ipm *ipm = (struct hhmpc_ipm*)malloc(sizeof(struct hhmpc_ipm));
    ipm->tmp2_optvar_seqlen = (real_t *)malloc(sizeof(real_t) * T*(n+m));
    ipm->tmp3_state_veclen = (real_t *)malloc(sizeof(real_t) * n);
    real_t reg[] = {0.0};
    ipm->reg = reg;
    ipm->Phi = Phi;
    
    real_t PhiBlock[(n+m)*(n+m)];
    real_t PhiBlock_I[(n+m)*(n+m)];
    real_t PhiBlock_I_last[(n+m)*(n+m)];
    real_t Block_nxn1[n*n];
    real_t Block_nxn2[n*n];
    real_t tmp_optvar_veclenxoptvar_veclen[(n+m)*(n+m)];
    
    real_t L_Phi_blocks[m*m + (T-1)*(n+m)*(n+m) + n*n]; /*blocks discribed in paper*/
    real_t L_Phi_T_blocks[m*m + (T-1)*(n+m)*(n+m) + n*n]; /*blocks discribed in paper*/
    ipm->tmp_phibl1 = PhiBlock;
    ipm->tmp_phibl2 = PhiBlock_I;
    ipm->tmp_phibl3 = PhiBlock_I_last;
    ipm->tmp10 = tmp_optvar_veclenxoptvar_veclen;
    ipm->tmpYbl = Block_nxn1;
    ipm->tmpQbl = Block_nxn2;
    ipm->tmp8_L_Phi = L_Phi_blocks;
    ipm->tmp9_L_Phi_T = L_Phi_T_blocks;
    
    ipm->A_B_T =
            (real_t *)malloc(sizeof(real_t) * (n+m)*n);
    ipm->A_B =
            (real_t *)malloc(sizeof(real_t) * n*(n+m));
    uint32_t i;
    mpcinc_mtx_transpose(A_T, A, n, n);
    mpcinc_mtx_transpose(B_T, B, n, m);
    for (i = 0; i < n*n; i++)
        ipm->A_B_T[i] = A_T[i];
    for (i = 0; i < n*m; i++)
        ipm->A_B_T[n*n+i] = B_T[i];
    
    mpcinc_mtx_transpose(ipm->A_B, ipm->A_B_T, n+m, n);
    
    mpcinc_mtx_transpose(C_T, C, T*n, T*(n+m));
    
    /* TODO Fehler abfangen 
     * if(delta_z == NULL)
     */
    solve_sysofleq(delta_z, delta_v, ipm, Phi, rd, rp, C, C_T, A, A_T, B, B_T, n, m, T,
                   eye_nm, eye_n,
                   tmp_optvar_seqlen,
                   tmp_dual_seqlen,
                   L_Y, L_Y_T);

#test form_Y_test2
    const uint32_t n = 5, m = 2;
    real_t A[] = {0.23996015,    0.,  0.,           0., 0.,
                           -0.37221757,   1.,  0.,           0., 0.,
                           -0.99008755,   0.,  0.13885973,   0., 0.,
                           -48.93540655, 64.1, 2.39923411,   1., 0.,
                           0.,            0.,  0.,           0., 1.};
    real_t B[] = {-1.2346445,  1.,
                           -1.43828223, 1.,
                           -4.48282454, 1.,
                           -1.79989043, 1.,
                           1.,          1.};
    real_t C[] = {1.2346445,   -1.,           1.,           0.,           0.,           0.,
    0.,           0.,           0.,           0.,           0.,           0.,
    0.,           0.,           0.,           0.,           0.,           0.,
    0.,           0.,           0.,        
    1.43828223,  -1.,           0.,           1.,           0.,           0.,
    0.,           0.,           0.,           0.,           0.,           0.,
    0.,           0.,           0.,           0.,           0.,           0.,
    0.,           0.,           0., 
    4.48282454,  -1.,          0.,          0.,          1.,          0.,
    0.,          0.,          0.,          0.,          0.,          0.,
    0.,           0.,           0.,           0.,           0.,           0.,
    0.,           0.,           0.,        
    1.79989043,  -1.,           0.,           0.,           0.,           1.,
    0.,           0.,           0.,           0.,           0.,           0.,
    0.,           0.,           0.,           0.,           0.,           0.,
    0.,           0.,           0.,        
    -1.,          -1.,           0.,           0.,           0.,           0.,
    1.,           0.,           0.,           0.,           0.,           0.,
    0.,           0.,           0.,           0.,           0.,           0.,
    0.,           0.,           0.,        
     0.,           0.,          -0.23996015,  -0.,          -0.,          -0.,
   -0.,           1.2346445,   -1.,           1.,           0.,           0.,
    0.,           0.,           0.,           0.,           0.,           0.,
    0.,           0.,           0.,        
    0.,           0.,           0.37221757,  -1.,          -0.,          -0.,
   -0.,           1.43828223,  -1.,           0.,           1.,           0.,
    0.,           0.,           0.,           0.,           0.,           0.,
    0.,           0.,           0.,        
    0.,           0.,           0.99008755,  -0.,          -0.13885973,  -0.,
   -0.,           4.48282454,  -1.,           0.,           0.,           1.,
    0.,           0.,           0.,           0.,           0.,           0.,
    0.,           0.,           0.,        
    0.,           0.,          48.93540655, -64.1 ,        -2.39923411,  -1.,
   -0.,           1.79989043,  -1.,           0.,           0.,           0.,
    1.,           0.,           0.,           0.,           0.,           0.,
    0.,           0.,           0.,        
    0.,           0.,          -0.,          -0.,          -0.,          -0.,
   -1.,          -1.,          -1.,           0.,           0.,           0.,
    0.,           1.,           0.,           0.,           0.,           0.,
    0.,           0.,           0.,        
    0.,           0.,           0.,           0.,           0.,           0.,
    0.,           0.,           0.,          -0.23996015,  -0.,          -0.,
   -0.,          -0.,           1.2346445,   -1.,           1.,           0.,
    0.,           0.,           0.,        
    0.,           0.,           0.,           0.,           0.,           0.,
    0.,           0.,           0.,           0.37221757,  -1.,          -0.,
   -0.,          -0.,           1.43828223,  -1.,           0.,           1.,
    0.,           0.,           0.,        
    0.,           0.,           0.,           0.,           0.,           0.,
    0.,           0.,           0.,           0.99008755,  -0.,          -0.13885973,
   -0.,          -0.,           4.48282454,  -1.,           0.,           0.,
    1.,           0.,           0.,        
     0.,           0.,           0.,           0.,           0.,           0.,
    0.,           0.,           0.,          48.93540655, -64.1,         -2.39923411,
   -1.,          -0.,           1.79989043,  -1.,           0.,           0.,
    0.,           1.,           0.,        
    0.,           0.,           0.,           0.,           0.,           0.,
    0.,           0.,           0.,          -0.,          -0.,          -0.,
   -0.,          -1.,          -1.,          -1.,           0.,           0.,
    0.,           0.,           1.        
    };
    real_t Phi[] = {3.449093298370094, 
1.164771562679857, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
1.164771562679857, 
2.947156542585603, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
2.152829070401170, 
0.190317887053782, 
0.227806703706394, 
0.265295520359006, 
0.072103829514501, 
0.121113734804647, 
0.083624918152035, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.190317887053782, 
2.246072144734246, 
0.301826402414710, 
0.357580660095174, 
0.144207659029002, 
0.165333967110255, 
0.109579709429791, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.227806703706394, 
0.301826402414710, 
2.375846101123026, 
0.449865799831342, 
0.216311488543503, 
0.209554199415863, 
0.135534500707547, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.265295520359006, 
0.357580660095174, 
0.449865799831342, 
2.598400939567510, 
0.288415318058004, 
0.591274431721471, 
0.442739291985303, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.072103829514501, 
0.144207659029002, 
0.216311488543503, 
0.288415318058004, 
2.360519147572504, 
0.144207659029002, 
0.072103829514501, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.121113734804647, 
0.165333967110255, 
0.209554199415863, 
0.591274431721471, 
0.144207659029002, 
4.144197865610833, 
1.762477633305224, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.083624918152035, 
0.109579709429791, 
0.135534500707547, 
0.442739291985303, 
0.072103829514501, 
1.762477633305224, 
3.455272842027468, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
2.247112521145647, 
0.300315246255671, 
0.353517971365696, 
0.406720696475720, 
0.072103829514501, 
0.183969368634298, 
0.130766643524273, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.300315246255671, 
2.374402397136450, 
0.448489548017229, 
0.522576698898008, 
0.144207659029002, 
0.238665539911515, 
0.164578389030736, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.353517971365696, 
0.448489548017229, 
2.543461124668762, 
0.638432701320295, 
0.216311488543503, 
0.293361711188731, 
0.198390134537198, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.406720696475720, 
0.522576698898008, 
0.638432701320295, 
2.823733148187026, 
0.288415318058004, 
0.764724549132614, 
0.579424102265883, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.072103829514501, 
0.144207659029002, 
0.216311488543503, 
0.288415318058004, 
2.360519147572504, 
0.144207659029002, 
0.072103829514501, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.183969368634298, 
0.238665539911515, 
0.293361711188731, 
0.764724549132614, 
0.144207659029002, 
4.661101621497266, 
2.189738783553382, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.130766643524273, 
0.164578389030736, 
0.198390134537198, 
0.579424102265883, 
0.072103829514501, 
2.189738783553382, 
3.808704815824698, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
2.244709470880635, 
0.305005308812700, 
0.365301146744766, 
0.425596984676831, 
0.117065556711759, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.305005308812700, 
2.394861379185403, 
0.484717449558106, 
0.574573519930809, 
0.234131113423517, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.365301146744766, 
0.484717449558106, 
2.604133752371446, 
0.723550055184786, 
0.351196670135276, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.425596984676831, 
0.574573519930809, 
0.723550055184786, 
25.372526590438767, 
0.468262226847034, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.000000000000000, 
0.117065556711759, 
0.234131113423517, 
0.351196670135276, 
0.468262226847034, 
2.585327783558793};
    real_t rd[] = {1.799199478255237, 
-14.598953140578267, 
61.256841828965008, 
-67.496128071481749, 
3.338302288071482, 
-9.101079672375279, 
6.303797468354430, 
-6.848707219128816, 
-7.153946388682055, 
3.646793427230208, 
-8.617464063505686, 
9.341723835758421, 
-12.921368804977474, 
10.303797468354430, 
-13.408221700285347, 
-4.927376099549454, 
-1.914422820581178, 
4.890162623300453, 
-3.305251932817916, 
-47.500666488936290, 
1.741935483870968};
    real_t rp[] = {17.911999750000000, 
14.805627920000001, 
51.740419690000003, 
187.179110180000009, 
-6.000000000000000, 
0.784252299999999, 
1.292587250000000, 
24.397155910000002, 
308.988284920000012, 
-6.000000000000000, 
-4.725196100000000, 
1.927152510000000, 
3.193437170000000, 
173.948409640000023, 
-12.000000000000000};
    real_t Y_ref[] = {1.704,  1.310,  2.965,  1.500,  0.005,  -0.118, 0.201,  0.456,  25.259, 0.012,  0.000,  0.000,  0.000,  0.000,  0.000,
        1.310,  1.927,  3.287,  1.637,  -0.049, 0.001,  -0.482, -0.051, -30.971,        0.026,  0.000,  0.000,  0.000,  0.000,  0.000,
        2.965,  3.287,  8.746,  3.860,  -0.677, -0.001, 0.021,  -0.134, 0.167,  0.040,  0.000,  0.000,  0.000,  0.000,  0.000,
        1.500,  1.637,  3.860,  2.376,  -0.144, -0.015, 0.004,  -0.185, 1.040,  0.108,  0.000,  0.000,  0.000,  0.000,  0.000,
        0.005,  -0.049, -0.677, -0.144, 0.894,  -0.011, 0.002,  -0.039, 0.936,  -0.426, 0.000,  0.000,  0.000,  0.000,  0.000,
        -0.118, 0.001,  -0.001, -0.015, -0.011, 1.726,  1.258,  2.831,  -4.303, 0.028,  -0.116, 0.208,  0.449,  25.497, 0.008,
        0.201,  -0.482, 0.021,  0.004,  0.002,  1.258,  2.478,  3.468,  42.319, -0.034, 0.003,  -0.474, -0.059, -30.707,        0.022,
        0.456,  -0.051, -0.134, -0.185, -0.039, 2.831,  3.468,  8.946,  29.932, -0.480, 0.002,  0.029,  -0.141, 0.457,  0.035,
        25.259, -30.971,        0.167,  1.040,  0.936,  -4.303, 42.319, 29.932, 3222.642,       -1.377, -0.013, 0.011,  -0.201, 1.329,  0.106,
        0.012,  0.026,  0.040,  0.108,  -0.426, 0.028,  -0.034, -0.480, -1.377, 1.229,  -0.011, 0.000,  -0.031, 0.852,  -0.427,
        0.000,  0.000,  0.000,  0.000,  0.000,  -0.116, 0.003,  0.002,  -0.013, -0.011, 1.719,  1.246,  2.806,  -4.325, 0.031,
        0.000,  0.000,  0.000,  0.000,  0.000,  0.208,  -0.474, 0.029,  0.011,  0.000,  1.246,  2.459,  3.430,  42.185, -0.031,
        0.000,  0.000,  0.000,  0.000,  0.000,  0.449,  -0.059, -0.141, -0.201, -0.031, 2.806,  3.430,  8.744,  30.103, -0.419,
        0.000,  0.000,  0.000,  0.000,  0.000,  25.497, -30.707,        0.457,  1.329,  0.852,  -4.325, 42.185, 30.103, 3215.978,       -1.214,
        0.000,  0.000,  0.000,  0.000,  0.000,  0.008,  0.022,  0.035,  0.106,  -0.427, 0.031,  -0.031, -0.419, -1.214, 1.153};
    real_t beta_ref[] = {22.513895, 
-38.001947, 
-31.570700, 
-179.422228, 
13.288941, 
-5.392387, 
39.857884, 
10.172104, 
3317.810417, 
8.887658, 
-0.779530, 
0.680474, 
-16.169389, 
167.690721, 
10.076622};
    real_t *delta_v = malloc(T*n*sizeof(real_t));
    real_t *delta_z = malloc(T*(n+m)*sizeof(real_t));
    real_t *tmp_optvar_seqlen = (real_t *)malloc(sizeof(real_t) * T*(n+m));
    real_t *tmp_dual_seqlen = (real_t *)malloc(sizeof(real_t) * T*n);
    real_t *L_Y = (real_t *)malloc(sizeof(real_t) * T*n*T*n);
    real_t *L_Y_T = (real_t *)malloc(sizeof(real_t) * T*n*T*n);
    real_t *C_T = (real_t *)malloc(sizeof(real_t) * T*(n+m)*T*n);
    real_t *A_T = (real_t *)malloc(sizeof(real_t) * n*n);
    real_t *B_T = (real_t *)malloc(sizeof(real_t) * m*n);
    real_t delta_z_ref[] = {-13.997489150487263, 
5.406972595368199, 
4.776895838826961, 
10.733684585131803, 
16.414840767556548, 
-156.578190818640479, 
-2.590516555119194, 
3.871722379936190, 
-4.652813415677183, 
-9.071001815573380, 
-2.558390140372020, 
-48.856406163215773, 
16.464922653098494, 
2.628392409139868, 
-0.939205567832684, 
-4.564250749299972, 
-0.856148616921228, 
-4.322564467882859, 
-1.350495556682932, 
2.325126881373518, 
9.124936092007225};
    real_t delta_v_ref[] = {629.359948524434230, 
-1066.284511494853632, 
19.396311938666354, 
397.292038589655306, 
5.268576650132512, 
608.496770168496710, 
-731.217580993566003, 
81.330459700416299, 
-6.689914187784114, 
-34.036261511762845, 
3.590187702111360, 
2.905130931383225, 
4.343104636331974, 
-11.941383543336487, 
-24.835093488191738};
    real_t eye_nm[] = {1., 0., 0., 0., 0., 0., 0.,
                       0., 1., 0., 0., 0., 0., 0.,
                       0., 0., 1., 0., 0., 0., 0.,
                       0., 0., 0., 1., 0., 0., 0.,
                       0., 0., 0., 0., 1., 0., 0.,
                       0., 0., 0., 0., 0., 1., 0.,
                       0., 0., 0., 0., 0., 0., 1.};
    real_t eye_n[] = {1., 0., 0., 0., 0.,
                      0., 1., 0., 0., 0.,
                      0., 0., 1., 0., 0.,
                      0., 0., 0., 1., 0.,
                      0., 0., 0., 0., 1.};
    struct hhmpc_ipm *ipm = (struct hhmpc_ipm*)malloc(sizeof(struct hhmpc_ipm));
    ipm->tmp2_optvar_seqlen = (real_t *)malloc(sizeof(real_t) * T*(n+m));
    ipm->tmp3_state_veclen = (real_t *)malloc(sizeof(real_t) * n);
    real_t reg[] = {0.0};
    ipm->reg = reg;
    ipm->Phi = Phi;
    
    real_t PhiBlock[(n+m)*(n+m)];
    real_t PhiBlock_I[(n+m)*(n+m)];
    real_t PhiBlock_I_last[(n+m)*(n+m)];
    real_t Block_nxn1[n*n];
    real_t Block_nxn2[n*n];
    real_t tmp_optvar_veclenxoptvar_veclen[(n+m)*(n+m)];
    
    real_t L_Phi_blocks[m*m + (T-1)*(n+m)*(n+m) + n*n]; /*blocks discribed in paper*/
    real_t L_Phi_T_blocks[m*m + (T-1)*(n+m)*(n+m) + n*n]; /*blocks discribed in paper*/
    ipm->tmp_phibl1 = PhiBlock;
    ipm->tmp_phibl2 = PhiBlock_I;
    ipm->tmp_phibl3 = PhiBlock_I_last;
    ipm->tmp10 = tmp_optvar_veclenxoptvar_veclen;
    ipm->tmpYbl = Block_nxn1;
    ipm->tmpQbl = Block_nxn2;
    ipm->tmp8_L_Phi = L_Phi_blocks;
    ipm->tmp9_L_Phi_T = L_Phi_T_blocks;
    
    
    ipm->A_B_T =
            (real_t *)malloc(sizeof(real_t) * (n+m)*n);
    ipm->A_B =
            (real_t *)malloc(sizeof(real_t) * n*(n+m));
    uint32_t i;
    
    mpcinc_mtx_transpose(A_T, A, n, n);
    mpcinc_mtx_transpose(B_T, B, n, m);
    for (i = 0; i < n*n; i++)
        ipm->A_B_T[i] = A_T[i];
    for (i = 0; i < n*m; i++)
        ipm->A_B_T[n*n+i] = B_T[i];
    
    mpcinc_mtx_transpose(ipm->A_B, ipm->A_B_T, n+m, n);
    

    mpcinc_mtx_transpose(C_T, C, T*n, T*(n+m));
    
    solve_sysofleq(delta_z, delta_v, ipm, Phi, rd, rp, C, C_T, A, A_T, B, B_T, n, m, T,
                   eye_nm, eye_n,
                   tmp_optvar_seqlen,
                   tmp_dual_seqlen,
                   L_Y, L_Y_T);
    fail_unless(mtx_cmp(delta_z, delta_z_ref, 21, 1e-6) == -1, "form_Y2 failed");
    fail_unless(mtx_cmp(delta_v, delta_v_ref, 15, 1e-5) == -1, "form_Y2 failed");
    free(delta_v);
    free(delta_z);
    free(tmp_optvar_seqlen);
    free(tmp_dual_seqlen);
    
#test form_Y_test
    real_t A[] = {1., 2., 1., 2.};
    real_t B[] = {-3., 1.};
    real_t C[] = {3., 1., 0., 0., 0., 0., 0., 0., 0.,
                  -1., 0., 1., 0., 0., 0., 0., 0., 0.,
                  0., -1., -2., 3., 1., 0., 0., 0., 0.,
                  0., -1., -2., -1., 0., 1., 0., 0., 0.,
                  0., 0., 0., 0., -1., -2., 3., 1., 0.,
                  0., 0., 0., 0., -1., -2., -1., 0., 1.};
    
    real_t Y[T*N*T*N] = {0., 0., 0., 0., 0., 0.,
                         0., 0., 0., 0., 0., 0.,
                         0., 0., 0., 0., 0., 0.,
                         0., 0., 0., 0., 0., 0.,
                         0., 0., 0., 0., 0., 0.,
                         0., 0., 0., 0., 0., 0.};
    real_t Phi[] = {4., 0., 0., 0., 0., 0., 0., 0., 0.,
                    0., 5., 2., 0., 0., 0., 0., 0., 0.,
                    0., 2., 4., -1., 0., 0., 0., 0., 0.,
                    0., 0., -1., 2., 0., 0., 0., 0., 0.,
                    0., 0., 0., 0., 5., 2., 0., 0., 0.,
                    0., 0., 0., 0., 2., 4., -1., 0., 0.,
                    0., 0., 0., 0., 0., -1., 3., 0., 0.,
                    0., 0., 0., 0., 0., 0., 0., 4., -3.,
                    0., 0., 0., 0., 0., 0., 0., -3., 4.};
                    
    real_t *tmp_optvar_seqlen = (real_t *)malloc(sizeof(real_t) * T*(N+M));
    real_t *tmp_dual_seqlen = (real_t *)malloc(sizeof(real_t) * T*N);
    real_t *L_Y_blocks = (real_t *)malloc(sizeof(real_t) * T*N*T*N);
    real_t *L_Y_T_blocks = (real_t *)malloc(sizeof(real_t) * T*N*T*N);
    real_t *L_Y = (real_t *)malloc(sizeof(real_t) * T*N*T*N);
    real_t *L_Y_T = (real_t *)malloc(sizeof(real_t) * T*N*T*N);
    real_t L_Phi_blocks[M*M + (T-1)*(N+M)*(N+M) + N*N]; /*blocks discribed in paper*/
    real_t L_Phi_T_blocks[M*M + (T-1)*(N+M)*(N+M) + N*N]; /*blocks discribed in paper*/
    real_t L_Phi[T*(N+M)*T*(N+M)];
    real_t L_Phi_T[T*(N+M)*T*(N+M)];
    uint32_t g;
    real_t eye_nm[] = {1., 0., 0.,
                       0., 1., 0.,
                       0., 0., 1};
    real_t eye_n[] = {1., 0.,
                      0., 1.}; 
    
    real_t L_Phi_ref[T*(N+M)*T*(N+M)];
    

                    
    real_t Y_ref[] = {271./108., -97/108., -5./27., 1./9., 0., 0.,
                      -97/108., 67/108., -1./27., -7./9., 0., 0.,
                      -5./27., -1./27., 4.959517657192076, -527./387., -5./43., 3./43.,
                      1./9., -7./9., -527./387, 346./129., -9./43., -29./43.,
                      0., 0., -5./43., -9./43., 1173./301., 10./301.,
                      0., 0., 3./43., -29./43., 10./301.,        725./301.};
   
                      
                      
    real_t beta[T*N];
    real_t rd[] = {1., 1., 1., 1., 1., 1., 1., 1., 1.};
    real_t rp[] = {1., 1., 1., 1., 1., 1.};
    real_t delta_v[T*N];
    real_t delta_z[T*(N+M)];
    real_t delta_z_ref[] = {-1.497130713389783, 
3.491392140169356, 
-2.497130713389777, 
-1.311592177863274, 
1.431907246979609, 
-3.814461464473480, 
-0.282106439809970, 
-6.350696362537439, 
-7.479122121777321};
    real_t delta_v_ref[] = {32.608067797050708, 
92.835680537592992, 
11.299205178363676, 
34.771561892754256, 
1.965419084817798, 
9.864399399496964};
    uint32_t i;
    real_t PhiBlock[(N+M)*(N+M)];
    real_t PhiBlock2[(N+M)*(N+M)];
    real_t PhiBlock3[(N+M)*(N+M)];
    real_t Block_nxn1[N*N];
    real_t Block_nxn2[N*N];
    real_t tmp_optvar_veclenxoptvar_veclen[(N+M)*(N+M)];
    
    real_t C_T[T*(N+M) * T*N];              
    real_t *A_T = (real_t *)malloc(sizeof(real_t) * N*N);
    real_t *B_T = (real_t *)malloc(sizeof(real_t) * M*N);
    real_t A_T_B_T[N*(N+M)];
    real_t A_B[(N+M)*N];
    real_t *tmp1 = (real_t *)malloc(sizeof(real_t) * T*(N+N));
    real_t *tmp2 = (real_t *)malloc(sizeof(real_t) * T*(M+N));
    real_t *tmp3 = (real_t *)malloc(sizeof(real_t) * N);
    real_t reg[] = {0.0};
    mpcinc_mtx_transpose(A_T, A, N, N);
    mpcinc_mtx_transpose(B_T, B, N, M);
    

    for (i = 0; i < N*N; i++)
        A_T_B_T[i] = A_T[i];
    for (i = 0; i < N*M; i++)
        A_T_B_T[N*N+i] = B_T[i];

    
    mpcinc_mtx_transpose(A_B, A_T_B_T, N+M, N);
                      
    for(g = 0; g < T*(N+M)*T*(N+M); g++)
        L_Phi[g] = 0;

    
    form_Y(L_Y_blocks, L_Y_T_blocks, L_Phi_blocks, L_Phi_T_blocks,
           Phi, reg, T, A_B, A_T_B_T, N, B, B_T, M,
           eye_nm, eye_n,
           PhiBlock, PhiBlock2, PhiBlock3,
           Block_nxn1, Block_nxn2, tmp_optvar_veclenxoptvar_veclen);
    
    setBlock(L_Phi, T*(N+M), L_Phi_blocks, M, M, 0, 0);
    setBlock(L_Phi, T*(N+M), L_Phi_blocks+M*M, N+M, N+M, M, M);
    setBlock(L_Phi, T*(N+M), L_Phi_blocks+M*M+1*(N+M)*(N+M), N+M, N+M, M+1*(N+M), M+1*(N+M));
    setBlock(L_Phi, T*(N+M), L_Phi_blocks+M*M+2*(N+M)*(N+M), N, N, M+2*(N+M), M+2*(N+M));
    
    cholesky(L_Phi_ref, Phi, T*(N+M));
    
//     fail_unless(mtx_cmp(Y, Y_ref, 36, 1e-9) == -1, "form_Y failed");
    fail_unless(mtx_cmp(L_Phi, L_Phi_ref, T*(N+M)*T*(N+M), 0) == -1, "false L_Phi");
    
    mpcinc_mtx_transpose(L_Phi_T, L_Phi, T*(N+M), T*(N+M));
    
    form_beta(beta, L_Phi_blocks, L_Phi_T_blocks, rd, rp, T, C, N, M, tmp1, tmp2);
    for(i = 0; i < T*N; i++){
        delta_v[i]=beta[i];
    }
    setBlock(L_Y, T*N, L_Y_blocks, N, N, 0, 0);
    setBlock(L_Y, T*N, L_Y_blocks+N*N, N, N, N, 0);
    setBlock(L_Y, T*N, L_Y_blocks+2*N*N, N, N, N, N);
    setBlock(L_Y, T*N, L_Y_blocks+3*N*N, N, N, 2*N, N);
    setBlock(L_Y, T*N, L_Y_blocks+4*N*N, N, N, 2*N, 2*N);
    setBlock(L_Y_T, T*N, L_Y_T_blocks, N, N, 0, 0);
    setBlock(L_Y_T, T*N, L_Y_T_blocks+N*N, N, N, 0, N);
    setBlock(L_Y_T, T*N, L_Y_T_blocks+2*N*N, N, N, N, N);
    setBlock(L_Y_T, T*N, L_Y_T_blocks+3*N*N, N, N, N, 2*N);
    setBlock(L_Y_T, T*N, L_Y_T_blocks+4*N*N, N, N, 2*N, 2*N);
    form_delta_v(delta_v, tmp_dual_seqlen, tmp3, L_Y_blocks, L_Y_T_blocks, T, N);
    
    
    mpcinc_mtx_transpose(C_T, C, T*N, T*(N+M));
    
    form_delta_z(delta_z, tmp_optvar_seqlen, delta_v, L_Phi_blocks, L_Phi_T_blocks, rd, C_T, T, N, M);
    
    fail_unless(mtx_cmp(delta_v, delta_v_ref, 6, 1e-8) == -1, "form_delta_v failed");
    fail_unless(mtx_cmp(delta_z, delta_z_ref, 9, 1e-10) == -1, "form_delta_z failed");
    
#test form_Y11_test
    real_t sol[N*N];
    real_t B[] = {-3., 1.};
    real_t R0_I[] = {-.5};
    real_t Q1[] = {1., 0., 0., 1.};
    real_t *tmp1_mxn = (real_t*)malloc(sizeof(real_t) * M*N);
    real_t *tmp2_mxn = (real_t*)malloc(sizeof(real_t) * M*N);
    
    real_t sol_ref[] = {37., -12., -12., 5.};
    form_Y11(sol, B, B, N, M, R0_I, R0_I, Q1, tmp1_mxn, tmp2_mxn);/*
    fail_unless(mtx_cmp(sol, sol_ref, 4, 0) == -1, "form_Y11 failed");*/

#test setBlock_test
    real_t Phi[] = {1., 0., 0., 0., 0., 0.,
                    0., 2., 2., -2., 0., 0.,
                    0., 2., -2., 2., 0., 0.,
                    0., -2., 2., 2., 0., 0.,
                    0., 0., 0., 0., 3., -3.,
                    0., 0., 0., 0., -3., 3.};
    uint32_t dim = 6;
    real_t block[] = {1., 1., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0.};
    real_t Phi_ref[] = {1., 0., 0., 0., 0., 0.,
                    0., 2., 2., -2., 0., 0.,
                    0., 2., -2., 1., 1., 0.,
                    0., -2., 2., 0., 1., 1.,
                    0., 0., 0., 0., 1., 0.,
                    0., 0., 0., 0., 0., 0.};

    setBlock(Phi, dim, block, 3, 4, 2, 3);
    fail_unless(mtx_cmp(Phi, Phi_ref, 36, 0) == -1, "setBlock failed");

#test getBlock_test
    real_t Phi[] = {1., 0., 0., 0., 0., 0.,
                    0., 2., 2., -2., 0., 0.,
                    0., 2., -2., 2., 0., 0.,
                    0., -2., 2., 2., 0., 0.,
                    0., 0., 0., 0., 3., -3.,
                    0., 0., 0., 0., -3., 3.};
    uint32_t dim = 6;
    real_t block[12];
    real_t block_ref[] = {2., 0., 0., 2., 0., 0., 0., 3., -3., 0., -3., 3.};
    uint32_t first_row = 2, first_col = 3, size_row = 3, size_col = 4;
    getBlock(block, Phi, dim, first_row, first_col, size_row, size_col);
    fail_unless(mtx_cmp(block, block_ref, 12, 0) == -1, "getBlock failed");
    
    